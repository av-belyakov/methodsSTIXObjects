package domainobjectsstix

import (
	"encoding/json"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/av-belyakov/methodstixobjects/commonlibs"
	"github.com/av-belyakov/methodstixobjects/datamodels/stixhelpers"
)

/* --- MalwareDomainObjectsSTIX --- */

// DecoderJSON выполняет декодирование JSON объекта
func (e MalwareDomainObjectsSTIX) DecodeJSON(raw *json.RawMessage) (interface{}, error) {
	if err := json.Unmarshal(*raw, &e); err != nil {
		return nil, err
	}

	return e, nil
}

// EncoderJSON выполняет кодирование в JSON объект
func (e MalwareDomainObjectsSTIX) EncodeJSON(interface{}) (*[]byte, error) {
	result, err := json.Marshal(e)

	return &result, err
}

func (e *MalwareDomainObjectsSTIX) Get() (*MalwareDomainObjectsSTIX, error) {
	return e, nil
}

// -------- IsFamily property ---------
func (a *MalwareDomainObjectsSTIX) GetIsFamily() bool {
	return a.IsFamily
}

// SetValueIsFamily устанавливает BOOL значение для поля IsFamily
func (a *MalwareDomainObjectsSTIX) SetValueIsFamily(v bool) {
	a.IsFamily = v
}

// SetAnyIsFamily устанавливает ЛЮБОЕ значение для поля IsFamily
func (a *MalwareDomainObjectsSTIX) SetAnyIsFamily(i interface{}) {
	if v, ok := i.(bool); ok {
		a.IsFamily = v
	}
}

// -------- Name property ---------
func (e *MalwareDomainObjectsSTIX) GetName() string {
	return e.Name
}

// SetValueName устанавливает значение для поля Name
func (e *MalwareDomainObjectsSTIX) SetValueName(v string) {
	e.Name = v
}

// SetAnyName устанавливает ЛЮБОЕ значение для поля Name
func (e *MalwareDomainObjectsSTIX) SetAnyName(i interface{}) {
	e.Name = fmt.Sprint(i)
}

// -------- Description property ---------
func (e *MalwareDomainObjectsSTIX) GetDescription() string {
	return e.Description
}

// SetValueDescription устанавливает значение для поля Description
func (e *MalwareDomainObjectsSTIX) SetValueDescription(v string) {
	e.Description = v
}

// SetAnyDescription устанавливает ЛЮБОЕ значение для поля Description
func (e *MalwareDomainObjectsSTIX) SetAnyDescription(i interface{}) {
	e.Description = fmt.Sprint(i)
}

// -------- FirstSeen property ---------
func (e *MalwareDomainObjectsSTIX) GetFirstSeen() string {
	return e.FirstSeen
}

// SetValueFirstSeen устанавливает значение в формате RFC3339 для поля FirstSeen
func (e *MalwareDomainObjectsSTIX) SetValueFirstSeen(v string) error {
	if _, err := time.Parse(time.RFC3339, v); err != nil {
		return err
	}

	e.FirstSeen = v

	return nil
}

// SetAnyFirstSeen устанавливает ЛЮБОЕ значение для поля FirstSeen
func (e *MalwareDomainObjectsSTIX) SetAnyFirstSeen(i interface{}) {
	tmp := commonlibs.ConversionAnyToInt(i)
	e.FirstSeen = commonlibs.GetDateTimeFormatRFC3339(int64(tmp))
}

// -------- LastSeen property ---------
func (e *MalwareDomainObjectsSTIX) GetLastSeen() string {
	return e.LastSeen
}

// SetValueLastSeen устанавливает значение в формате RFC3339 для поля LastSeen
func (e *MalwareDomainObjectsSTIX) SetValueLastSeen(v string) error {
	if _, err := time.Parse(time.RFC3339, v); err != nil {
		return err
	}

	e.LastSeen = v

	return nil
}

// SetAnyLastSeen устанавливает ЛЮБОЕ значение для поля LastSeen
func (e *MalwareDomainObjectsSTIX) SetAnyLastSeen(i interface{}) {
	tmp := commonlibs.ConversionAnyToInt(i)
	e.LastSeen = commonlibs.GetDateTimeFormatRFC3339(int64(tmp))
}

// -------- Aliases property ---------
func (e *MalwareDomainObjectsSTIX) GetAliases() []string {
	return e.Aliases
}

// SetValueAliases устанавливает значение для поля Aliases
func (e *MalwareDomainObjectsSTIX) SetValueAliases(v string) {
	e.Aliases = append(e.Aliases, v)
}

// SetAnyAliases устанавливает ЛЮБОЕ значение для поля Aliases
func (e *MalwareDomainObjectsSTIX) SetAnyAliases(i interface{}) {
	e.Aliases = append(e.Aliases, fmt.Sprint(i))
}

// -------- KillChainPhases property ---------
func (e *MalwareDomainObjectsSTIX) GetKillChainPhases() stixhelpers.KillChainPhasesTypeSTIX {
	return e.KillChainPhases
}

func (e *MalwareDomainObjectsSTIX) SetValueKillChainPhases(v stixhelpers.KillChainPhasesTypeSTIX) {
	e.KillChainPhases = v
}

// -------- MalwareTypes property ---------
func (e *MalwareDomainObjectsSTIX) GetMalwareTypes() []stixhelpers.OpenVocabTypeSTIX {
	return e.MalwareTypes
}

func (e *MalwareDomainObjectsSTIX) SetValueMalwareTypes(v []stixhelpers.OpenVocabTypeSTIX) {
	e.MalwareTypes = v
}

// -------- OperatingSystemRefs property ---------
func (e *MalwareDomainObjectsSTIX) GetOperatingSystemRefs() []stixhelpers.IdentifierTypeSTIX {
	return e.OperatingSystemRefs
}

func (e *MalwareDomainObjectsSTIX) SetValueOperatingSystemRefs(v []stixhelpers.IdentifierTypeSTIX) {
	e.OperatingSystemRefs = v
}

// -------- ArchitectureExecutionEnvs property ---------
func (e *MalwareDomainObjectsSTIX) GetArchitectureExecutionEnvs() []stixhelpers.OpenVocabTypeSTIX {
	return e.ArchitectureExecutionEnvs
}

func (e *MalwareDomainObjectsSTIX) SetValueArchitectureExecutionEnvs(v []stixhelpers.OpenVocabTypeSTIX) {
	e.ArchitectureExecutionEnvs = v
}

// -------- ImplementationLanguages property ---------
func (e *MalwareDomainObjectsSTIX) GetImplementationLanguages() []stixhelpers.OpenVocabTypeSTIX {
	return e.ImplementationLanguages
}

func (e *MalwareDomainObjectsSTIX) SetValueImplementationLanguages(v []stixhelpers.OpenVocabTypeSTIX) {
	e.ImplementationLanguages = v
}

// -------- Capabilities property ---------
func (e *MalwareDomainObjectsSTIX) GetCapabilities() []stixhelpers.OpenVocabTypeSTIX {
	return e.Capabilities
}

func (e *MalwareDomainObjectsSTIX) SetValueCapabilities(v []stixhelpers.OpenVocabTypeSTIX) {
	e.Capabilities = v
}

// -------- SampleRefs property ---------
func (e *MalwareDomainObjectsSTIX) GetSampleRefs() []stixhelpers.IdentifierTypeSTIX {
	return e.SampleRefs
}

func (e *MalwareDomainObjectsSTIX) SetValueSampleRefs(v []stixhelpers.IdentifierTypeSTIX) {
	e.SampleRefs = v
}

// ValidateStruct является валидатором параметров содержащихся в типе MalwareDomainObjectsSTIX
func (e MalwareDomainObjectsSTIX) ValidateStruct() bool {
	if !(regexp.MustCompile(`^(malware--)[0-9a-f|-]+$`).MatchString(e.ID)) {
		return false
	}

	if !e.ValidateStructCommonFields() {
		return false
	}

	if len(e.OperatingSystemRefs) > 0 {
		for _, v := range e.OperatingSystemRefs {
			if !v.CheckIdentifierTypeSTIX() {
				return false
			}
		}
	}

	if len(e.SampleRefs) > 0 {
		for _, v := range e.SampleRefs {
			if !v.CheckIdentifierTypeSTIX() {
				return false
			}
		}
	}

	return true
}

// SanitizeStruct для ряда полей, выполняет замену некоторых специальных символов на их HTML код
func (e MalwareDomainObjectsSTIX) SanitizeStruct() MalwareDomainObjectsSTIX {
	e.CommonPropertiesDomainObjectSTIX = e.CommonPropertiesDomainObjectSTIX.SanitizeStruct()

	e.Name = commonlibs.StringSanitize(e.Name)
	e.Description = commonlibs.StringSanitize(e.Description)

	if len(e.MalwareTypes) > 0 {
		mt := make([]stixhelpers.OpenVocabTypeSTIX, 0, len(e.MalwareTypes))
		for _, v := range e.MalwareTypes {
			tmp := v.SanitizeStructOpenVocabTypeSTIX()
			mt = append(mt, tmp)
		}

		e.MalwareTypes = mt
	}

	if len(e.Aliases) > 0 {
		aliasesTmp := make([]string, 0, len(e.Aliases))
		for _, v := range e.Aliases {
			aliasesTmp = append(aliasesTmp, commonlibs.StringSanitize(v))
		}
		e.Aliases = aliasesTmp
	}

	e.KillChainPhases = e.KillChainPhases.SanitizeStructKillChainPhasesTypeSTIX()

	if len(e.ArchitectureExecutionEnvs) > 0 {
		aee := make([]stixhelpers.OpenVocabTypeSTIX, 0, len(e.ArchitectureExecutionEnvs))
		for _, v := range e.ArchitectureExecutionEnvs {
			tmp := v.SanitizeStructOpenVocabTypeSTIX()
			aee = append(aee, tmp)
		}

		e.ArchitectureExecutionEnvs = aee
	}

	if len(e.ImplementationLanguages) > 0 {
		il := make([]stixhelpers.OpenVocabTypeSTIX, 0, len(e.ImplementationLanguages))
		for _, v := range e.ImplementationLanguages {
			tmp := v.SanitizeStructOpenVocabTypeSTIX()
			il = append(il, tmp)
		}

		e.ImplementationLanguages = il
	}

	if len(e.Capabilities) > 0 {
		c := make([]stixhelpers.OpenVocabTypeSTIX, 0, len(e.Capabilities))
		for _, v := range e.Capabilities {
			tmp := v.SanitizeStructOpenVocabTypeSTIX()
			c = append(c, tmp)
		}

		e.Capabilities = c
	}

	return e
}

// GetID возвращает ID STIX объекта
func (e MalwareDomainObjectsSTIX) GetID() string {
	return e.ID
}

// GetType возвращает Type STIX объекта
func (e MalwareDomainObjectsSTIX) GetType() string {
	return e.Type
}

// ToStringBeautiful выполняет красивое представление информации содержащейся в типе
func (e MalwareDomainObjectsSTIX) ToStringBeautiful() string {
	str := strings.Builder{}

	str.WriteString(e.CommonPropertiesObjectSTIX.ToStringBeautiful())
	str.WriteString(e.CommonPropertiesDomainObjectSTIX.ToStringBeautiful())
	str.WriteString(fmt.Sprintf("'name': '%s'\n", e.Name))
	str.WriteString(fmt.Sprintf("'description': '%s'\n", e.Description))
	str.WriteString(fmt.Sprintf("'malware_types': \n%v", func(l []stixhelpers.OpenVocabTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'malware_type '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.MalwareTypes)))
	str.WriteString(fmt.Sprintf("'is_family': '%v'\n", e.IsFamily))
	str.WriteString(fmt.Sprintf("'aliases': \n%v", func(l []string) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'aliase '%d'': '%s'\n", k, v))
		}

		return str.String()
	}(e.Aliases)))
	str.WriteString(fmt.Sprintf("'kill_chain_phases': \n%v", func(l stixhelpers.KillChainPhasesTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'key': '%v' 'kill_chain_name': '%s'\n", k, v.KillChainName))
			str.WriteString(fmt.Sprintf("\t'key': '%v' 'phase_name': '%s'\n", k, v.PhaseName))
		}

		return str.String()
	}(e.KillChainPhases)))
	str.WriteString(fmt.Sprintf("'first_seen': '%v'\n", e.FirstSeen))
	str.WriteString(fmt.Sprintf("'last_seen': '%v'\n", e.LastSeen))
	str.WriteString(fmt.Sprintf("'operating_system_refs': \n%v", func(l []stixhelpers.IdentifierTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'operating_system_ref '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.OperatingSystemRefs)))
	str.WriteString(fmt.Sprintf("'architecture_execution_envs': \n%v", func(l []stixhelpers.OpenVocabTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'architecture_execution_env '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.ArchitectureExecutionEnvs)))
	str.WriteString(fmt.Sprintf("'implementation_languages': \n%v", func(l []stixhelpers.OpenVocabTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'implementation_language '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.ImplementationLanguages)))
	str.WriteString(fmt.Sprintf("'capabilities': \n%v", func(l []stixhelpers.OpenVocabTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'capabilitie '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.Capabilities)))
	str.WriteString(fmt.Sprintf("'sample_refs': \n%v", func(l []stixhelpers.IdentifierTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'sample_ref '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.SampleRefs)))

	return str.String()
}

// GeneratingDataForIndexing выполняет генерацию данных для их последующей индексации
func (e MalwareDomainObjectsSTIX) GeneratingDataForIndexing() map[string]string {
	dataForIndex := map[string]string{
		"id":   e.ID,
		"type": e.Type,
	}

	if e.Name != "" {
		dataForIndex["name"] = e.Name
	}

	if e.Description != "" {
		dataForIndex["description"] = e.Description
	}

	if len(e.Aliases) > 0 {
		var strTmp string

		for _, v := range e.Aliases {
			strTmp += fmt.Sprintf(" %s", v)
		}

		dataForIndex["aliases"] = strTmp
	}

	return dataForIndex
}
