package domainobjectsstix

import (
	"encoding/json"
	"fmt"
	"regexp"
	"strings"

	"github.com/av-belyakov/methodstixobjects/commonlibs"
	"github.com/av-belyakov/methodstixobjects/datamodels/stixhelpers"
)

/* --- MalwareAnalysisDomainObjectsSTIX --- */

// DecoderJSON выполняет декодирование JSON объекта
func (mastix MalwareAnalysisDomainObjectsSTIX) DecodeJSON(raw *json.RawMessage) (interface{}, error) {
	if err := json.Unmarshal(*raw, &mastix); err != nil {
		return nil, err
	}

	return mastix, nil
}

// EncoderJSON выполняет кодирование в JSON объект
func (mastix MalwareAnalysisDomainObjectsSTIX) EncodeJSON(interface{}) (*[]byte, error) {
	result, err := json.Marshal(mastix)

	return &result, err
}

func (e *MalwareAnalysisDomainObjectsSTIX) Get() *MalwareAnalysisDomainObjectsSTIX {
	return e
}

// -------- Product property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetProduct() string {
	return e.Product
}

// SetValueProduct устанавливает значение для поля Product
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueProduct(v string) {
	e.Product = v
}

// SetAnyProduct устанавливает ЛЮБОЕ значение для поля Product
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyProduct(i interface{}) {
	e.Product = fmt.Sprint(i)
}

// -------- Version property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetVersion() string {
	return e.Version
}

// SetValueVersion устанавливает значение для поля Version
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueVersion(v string) {
	e.Version = v
}

// SetAnyVersion устанавливает ЛЮБОЕ значение для поля Version
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyVersion(i interface{}) {
	e.Version = fmt.Sprint(i)
}

// -------- ResultName property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetResultName() string {
	return e.ResultName
}

// SetValueResultName устанавливает значение для поля ResultName
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueResultName(v string) {
	e.ResultName = v
}

// SetAnyResultName устанавливает ЛЮБОЕ значение для поля ResultName
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyResultName(i interface{}) {
	e.ResultName = fmt.Sprint(i)
}

// -------- ConfigurationVersion property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetConfigurationVersion() string {
	return e.ConfigurationVersion
}

// SetValueConfigurationVersion устанавливает значение для поля ConfigurationVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueConfigurationVersion(v string) {
	e.ConfigurationVersion = v
}

// SetAnyConfigurationVersion устанавливает ЛЮБОЕ значение для поля ConfigurationVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyConfigurationVersion(i interface{}) {
	e.ConfigurationVersion = fmt.Sprint(i)
}

// -------- AnalysisEngineVersion property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAnalysisEngineVersion() string {
	return e.AnalysisEngineVersion
}

// SetValueAnalysisEngineVersion устанавливает значение для поля AnalysisEngineVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAnalysisEngineVersion(v string) {
	e.AnalysisEngineVersion = v
}

// SetAnyAnalysisEngineVersion устанавливает ЛЮБОЕ значение для поля AnalysisEngineVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyAnalysisEngineVersion(i interface{}) {
	e.AnalysisEngineVersion = fmt.Sprint(i)
}

// -------- AnalysisDefinitionVersion property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAnalysisDefinitionVersion() string {
	return e.AnalysisDefinitionVersion
}

// SetValueAnalysisDefinitionVersion устанавливает значение для поля AnalysisDefinitionVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAnalysisDefinitionVersion(v string) {
	e.AnalysisDefinitionVersion = v
}

// SetAnyAnalysisDefinitionVersion устанавливает ЛЮБОЕ значение для поля AnalysisDefinitionVersion
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyAnalysisDefinitionVersion(i interface{}) {
	e.AnalysisDefinitionVersion = fmt.Sprint(i)
}

// -------- Submitted property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetSubmitted() string {
	return e.Submitted
}

// SetValueSubmitted устанавливает значение для поля Submitted
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueSubmitted(v string) {
	e.Submitted = v
}

// SetAnySubmitted устанавливает ЛЮБОЕ значение для поля Submitted
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnySubmitted(i interface{}) {
	e.Submitted = fmt.Sprint(i)
}

// -------- AnalysisStarted property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAnalysisStarted() string {
	return e.AnalysisStarted
}

// SetValueAnalysisStarted устанавливает значение для поля AnalysisStarted
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAnalysisStarted(v string) {
	e.AnalysisStarted = v
}

// SetAnyAnalysisStarted устанавливает ЛЮБОЕ значение для поля AnalysisStarted
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyAnalysisStarted(i interface{}) {
	e.AnalysisStarted = fmt.Sprint(i)
}

// -------- AnalysisEnded property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAnalysisEnded() string {
	return e.AnalysisEnded
}

// SetValueAnalysisEnded устанавливает значение для поля AnalysisEnded
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAnalysisEnded(v string) {
	e.AnalysisEnded = v
}

// SetAnyAnalysisEnded устанавливает ЛЮБОЕ значение для поля AnalysisEnded
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyAnalysisEnded(i interface{}) {
	e.AnalysisEnded = fmt.Sprint(i)
}

// -------- Modules property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetModules() []string {
	return e.Modules
}

// SetValueModules устанавливает значение для поля Modules
func (e *MalwareAnalysisDomainObjectsSTIX) SetValueModules(v string) {
	e.Modules = append(e.Modules, v)
}

// SetAnyModules устанавливает ЛЮБОЕ значение для поля Modules
func (e *MalwareAnalysisDomainObjectsSTIX) SetAnyModules(i interface{}) {
	e.Modules = append(e.Modules, fmt.Sprint(i))
}

// -------- HostVMRef property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetHostVMRef() stixhelpers.IdentifierTypeSTIX {
	return e.HostVMRef
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueHostVMRef(v stixhelpers.IdentifierTypeSTIX) {
	e.HostVMRef = v
}

// -------- OperatingSystemRef property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetOperatingSystemRef() stixhelpers.IdentifierTypeSTIX {
	return e.OperatingSystemRef
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueOperatingSystemRef(v stixhelpers.IdentifierTypeSTIX) {
	e.OperatingSystemRef = v
}

// -------- SampleRef property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetSampleRef() stixhelpers.IdentifierTypeSTIX {
	return e.SampleRef
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueSampleRef(v stixhelpers.IdentifierTypeSTIX) {
	e.SampleRef = v
}

// -------- Result property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetResult() stixhelpers.OpenVocabTypeSTIX {
	return e.Result
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueResult(v stixhelpers.OpenVocabTypeSTIX) {
	e.Result = v
}

// -------- AvResult property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAvResult() stixhelpers.OpenVocabTypeSTIX {
	return e.AvResult
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAvResult(v stixhelpers.OpenVocabTypeSTIX) {
	e.AvResult = v
}

// -------- InstalledSoftwareRefs property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetInstalledSoftwareRefs() []stixhelpers.IdentifierTypeSTIX {
	return e.InstalledSoftwareRefs
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueInstalledSoftwareRefs(v []stixhelpers.IdentifierTypeSTIX) {
	e.InstalledSoftwareRefs = v
}

// -------- AnalysisScoRefs property ---------
func (e *MalwareAnalysisDomainObjectsSTIX) GetAnalysisScoRefs() []stixhelpers.IdentifierTypeSTIX {
	return e.AnalysisScoRefs
}

func (e *MalwareAnalysisDomainObjectsSTIX) SetValueAnalysisScoRefs(v []stixhelpers.IdentifierTypeSTIX) {
	e.AnalysisScoRefs = v
}

// ValidateStruct является валидатором параметров содержащихся в типе MalwareAnalysisDomainObjectsSTIX
func (e MalwareAnalysisDomainObjectsSTIX) ValidateStruct() bool {
	if !(regexp.MustCompile(`^(malware-analysis--)[0-9a-f|-]+$`).MatchString(e.ID)) {
		return false
	}

	if !e.ValidateStructCommonFields() {
		return false
	}

	//обязательное поле
	if e.Product == "" {
		return false
	}

	if e.Version != "" && !(regexp.MustCompile(`^[0-9a-z.]+$`).MatchString(e.Version)) {
		return false
	}

	if !e.HostVMRef.CheckIdentifierTypeSTIX() {
		return false
	}

	if !e.OperatingSystemRef.CheckIdentifierTypeSTIX() {
		return false
	}

	if len(e.InstalledSoftwareRefs) > 0 {
		for _, v := range e.InstalledSoftwareRefs {
			if !v.CheckIdentifierTypeSTIX() {
				return false
			}
		}
	}

	if len(e.AnalysisScoRefs) > 0 {
		for _, v := range e.AnalysisScoRefs {
			if !v.CheckIdentifierTypeSTIX() {
				return false
			}
		}
	}

	if !e.SampleRef.CheckIdentifierTypeSTIX() {
		return false
	}

	return true
}

// SanitizeStruct для ряда полей, выполняет замену некоторых специальных символов на их HTML код
func (e MalwareAnalysisDomainObjectsSTIX) SanitizeStruct() MalwareAnalysisDomainObjectsSTIX {
	e.CommonPropertiesDomainObjectSTIX = e.CommonPropertiesDomainObjectSTIX.SanitizeStruct()

	e.Product = commonlibs.StringSanitize(e.Product)
	e.ConfigurationVersion = commonlibs.StringSanitize(e.ConfigurationVersion)
	if len(e.Modules) > 0 {
		mTmp := make([]string, 0, len(e.Modules))
		for _, v := range e.Modules {
			mTmp = append(mTmp, commonlibs.StringSanitize(v))
		}

		e.Modules = mTmp
	}

	e.AnalysisEngineVersion = commonlibs.StringSanitize(e.AnalysisEngineVersion)
	e.AnalysisDefinitionVersion = commonlibs.StringSanitize(e.AnalysisDefinitionVersion)
	e.ResultName = commonlibs.StringSanitize(e.ResultName)
	e.Result = stixhelpers.OpenVocabTypeSTIX(commonlibs.StringSanitize(string(e.Result)))
	e.AvResult = stixhelpers.OpenVocabTypeSTIX(commonlibs.StringSanitize(string(e.AvResult)))

	return e
}

// GetID возвращает ID STIX объекта
func (e MalwareAnalysisDomainObjectsSTIX) GetID() string {
	return e.ID
}

// GetType возвращает Type STIX объекта
func (e MalwareAnalysisDomainObjectsSTIX) GetType() string {
	return e.Type
}

// ToStringBeautiful выполняет красивое представление информации содержащейся в типе
func (e MalwareAnalysisDomainObjectsSTIX) ToStringBeautiful() string {
	str := strings.Builder{}

	str.WriteString(e.CommonPropertiesObjectSTIX.ToStringBeautiful())
	str.WriteString(e.CommonPropertiesDomainObjectSTIX.ToStringBeautiful())
	str.WriteString(fmt.Sprintf("'product': '%s'\n", e.Product))
	str.WriteString(fmt.Sprintf("'version': '%s'\n", e.Version))
	str.WriteString(fmt.Sprintf("'host_vm_ref': '%s'\n", e.HostVMRef))
	str.WriteString(fmt.Sprintf("'operating_system_ref': '%s'\n", e.OperatingSystemRef))
	str.WriteString(fmt.Sprintf("'installed_software_refs': \n%v", func(l []stixhelpers.IdentifierTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'installed_software_ref '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.InstalledSoftwareRefs)))
	str.WriteString(fmt.Sprintf("'configuration_version': '%s'\n", e.ConfigurationVersion))
	str.WriteString(fmt.Sprintf("'modules': \n%v", func(l []string) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'module '%d'': '%s'\n", k, v))
		}

		return str.String()
	}(e.Modules)))
	str.WriteString(fmt.Sprintf("'analysis_engine_version': '%s'\n", e.AnalysisEngineVersion))
	str.WriteString(fmt.Sprintf("'analysis_definition_version': '%s'\n", e.AnalysisDefinitionVersion))
	str.WriteString(fmt.Sprintf("'submitted': '%v'\n", e.Submitted))
	str.WriteString(fmt.Sprintf("'analysis_started': '%v'\n", e.AnalysisStarted))
	str.WriteString(fmt.Sprintf("'analysis_ended': '%v'\n", e.AnalysisEnded))
	str.WriteString(fmt.Sprintf("'result_name': '%s'\n", e.ResultName))
	str.WriteString(fmt.Sprintf("'result': '%s'\n", e.Result))
	str.WriteString(fmt.Sprintf("'analysis_sco_refs': \n%v", func(l []stixhelpers.IdentifierTypeSTIX) string {
		str := strings.Builder{}

		for k, v := range l {
			str.WriteString(fmt.Sprintf("\t'analysis_sco_ref '%d'': '%v'\n", k, v))
		}

		return str.String()
	}(e.AnalysisScoRefs)))
	str.WriteString(fmt.Sprintf("'sample_ref': '%v'\n", e.SampleRef))
	str.WriteString(fmt.Sprintf("'av_result': '%v'\n", e.AvResult))

	return str.String()
}

// GeneratingDataForIndexing выполняет генерацию данных для их последующей индексации
func (e MalwareAnalysisDomainObjectsSTIX) GeneratingDataForIndexing() map[string]string {
	dataForIndex := map[string]string{
		"id":   e.ID,
		"type": e.Type,
	}

	if e.Result != "" {
		dataForIndex["result_name"] = e.ResultName
	}

	return dataForIndex
}
