package domainobject

import (
	"testing"

	methodstixobjects "github.com/av-belyakov/methodstixobjects/cmd"
	"github.com/av-belyakov/methodstixobjects/datamodels/stixhelpers"
	"github.com/stretchr/testify/assert"
)

func TestMalwareDomainObjectsSTIX(t *testing.T) {
	nm := methodstixobjects.NewMalwareDomainObjectsSTIX()

	assert.Equal(t, nm.GetType(), "malware")
	_, err := nm.Get()
	assert.NoError(t, err)

	nm.SetAnyIsFamily(true)
	assert.True(t, nm.GetIsFamily())

	nm.SetAnyName("malware name")
	_, err = nm.Get()
	assert.NoError(t, err)
	nm.SetValueName("mal_name")
	assert.Equal(t, nm.GetName(), "mal_name")

	nm.SetAnyDescription("example_description")
	assert.Equal(t, nm.GetDescription(), "example_description")
	nm.SetValueDescription("exm_description")
	assert.Equal(t, nm.GetDescription(), "exm_description")

	//--- FirstSeen
	err = nm.SetAnyFirstSeen("2024-02-05T17:31:01+00:00")
	assert.NoError(t, err)
	assert.Equal(t, nm.GetFirstSeen(), "2024-02-05T17:31:01+00:00")

	err = nm.SetAnyLastSeen(1716302427100)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetLastSeen(), "2024-05-21T17:40:27+03:00")

	nm.SetAnyAliases("vfff")
	nm.SetAnyAliases("bfff")
	nm.SetAnyAliases("xfff")
	nm.SetValueAliases("uefff")
	assert.Equal(t, len(nm.GetAliases()), 4)

	nm.SetFullValueKillChainPhases([]stixhelpers.KillChainPhasesTypeElementSTIX{
		{KillChainName: "green chan", PhaseName: "first phase"},
		{KillChainName: "red chan", PhaseName: "second phase"},
		{KillChainName: "blue chan", PhaseName: "third phase"},
	})
	nm.SetValueKillChainPhases(stixhelpers.KillChainPhasesTypeElementSTIX{
		KillChainName: "black chan", PhaseName: "first thrid phase",
	})
	assert.Equal(t, len(nm.GetKillChainPhases()), 4)

	nm.SetFullValueMalwareTypes([]stixhelpers.OpenVocabTypeSTIX{"1q", "2x", "3a", "4d"})
	nm.SetValueMalwareTypes(stixhelpers.OpenVocabTypeSTIX("7as"))
	assert.Equal(t, len(nm.GetMalwareTypes()), 5)

	nm.SetFullValueOperatingSystemRefs([]stixhelpers.IdentifierTypeSTIX{"111a", "222b", "333c"})
	nm.SetValueOperatingSystemRefs(stixhelpers.IdentifierTypeSTIX("82d"))
	assert.Equal(t, len(nm.GetOperatingSystemRefs()), 4)

	nm.SetFullValueArchitectureExecutionEnvs([]stixhelpers.OpenVocabTypeSTIX{"arh 1", "arh 2", "arh 3", "arh 4"})
	nm.SetValueArchitectureExecutionEnvs(stixhelpers.OpenVocabTypeSTIX("arh_6"))
	assert.Equal(t, len(nm.GetArchitectureExecutionEnvs()), 5)

	nm.SetFullValueImplementationLanguages([]stixhelpers.OpenVocabTypeSTIX{"RU", "EN", "CH", "FR", "GR"})
	nm.SetValueImplementationLanguages(stixhelpers.OpenVocabTypeSTIX("YT"))
	assert.Equal(t, len(nm.GetImplementationLanguages()), 6)

	nm.SetFullValueCapabilities([]stixhelpers.OpenVocabTypeSTIX{"cap1", "cap2"})
	nm.SetValueCapabilities(stixhelpers.OpenVocabTypeSTIX("cap3"))
	assert.Equal(t, len(nm.GetCapabilities()), 3)

	nm.SetFullValueSampleRefs([]stixhelpers.IdentifierTypeSTIX{"ref1"})
	nm.SetValueSampleRefs(stixhelpers.IdentifierTypeSTIX("ref2"))
	assert.Equal(t, len(nm.GetSampleRefs()), 2)
}

/*
// MalwareDomainObjectsSTIX объект "Malware", по терминалогии STIX, содержит подробную информацию о функционировании вредоносной программы
// Name - имя используемое для идентификации "Malware"
// Description - более подробное описание
// MalwareTypes - заранее определенный (предложенный) перечень вредоносного ПО
// IsFamily - представляет ли объект семейство вредоносных программ (если true) или экземпляр вредоносного ПО (если false) (ОБЯЗАТЕЛЬНОЕ ЗНАЧЕНИЕ)
// Aliases - альтернативные имена используемые для идентификации этого ПО или семейства ПО
// KillChainPhases - список цепочки фактов, к которым может быть отнесено это вредоносное ПО
// FirstSeen - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО или семейство вредоносных программ были впервые замечины
// LastSeen - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО или семейство вредоносных программ были замечины в последний раз
// OperatingSystemRefs - перечень идентификаторов ОС в которых может быть выполнено вредоносное ПО или семейство вредоносных программ
// ArchitectureExecutionEnvs - заранее определенный (предложенный) перечень архитектур в которых может быть выполнено вредоносное
// ПО или семейство вредоносных программ
// ImplementationLanguages - заранее определенный (предложенный) перечень языков программирования, используемых для реализации вредоносного
// ПО или семейства вредоносных программ
// Capabilities - заранее определенный (предложенный) перечень возможных идентификаторов используемых для обнаружения вредоносного
// ПО или семейства вредоносных программ
// SampleRefs - определяет список идентификаторов файлов или объектов ассоциируемых с вредоносным ПО или семейством вредоносных программ
type MalwareDomainObjectsSTIX struct {
	commonproperties.CommonPropertiesObjectSTIX
	commonpropertiesstixdo.CommonPropertiesDomainObjectSTIX
	IsFamily                  bool                                         `json:"is_family" bson:"is_family" required:"true"`
	Name                      string                                       `json:"name" bson:"name"`
	Description               string                                       `json:"description" bson:"description"`
	FirstSeen                 string                                       `json:"first_seen" bson:"first_seen"`
	LastSeen                  string                                       `json:"last_seen" bson:"last_seen"`
	Aliases                   []string                                     `json:"aliases" bson:"aliases"`
	KillChainPhases           []stixhelpers.KillChainPhasesTypeElementSTIX `json:"kill_chain_phases" bson:"kill_chain_phases"`
	MalwareTypes              []stixhelpers.OpenVocabTypeSTIX              `json:"malware_types" bson:"malware_types"`
	OperatingSystemRefs       []stixhelpers.IdentifierTypeSTIX             `json:"operating_system_refs" bson:"operating_system_refs"`
	ArchitectureExecutionEnvs []stixhelpers.OpenVocabTypeSTIX              `json:"architecture_execution_envs" bson:"architecture_execution_envs"`
	ImplementationLanguages   []stixhelpers.OpenVocabTypeSTIX              `json:"implementation_languages" bson:"implementation_languages"`
	Capabilities              []stixhelpers.OpenVocabTypeSTIX              `json:"capabilities" bson:"capabilities"`
	SampleRefs                []stixhelpers.IdentifierTypeSTIX             `json:"sample_refs" bson:"sample_refs"`
}
*/
