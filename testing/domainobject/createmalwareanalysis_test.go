package domainobject

import (
	"testing"

	methodstixobjects "github.com/av-belyakov/methodstixobjects/cmd"
	"github.com/av-belyakov/methodstixobjects/datamodels/stixhelpers"
	"github.com/stretchr/testify/assert"
)

func TestMalwareAnalysisDomainObjectsSTIX(t *testing.T) {
	nm := methodstixobjects.NewMalwareAnalysisDomainObjectsSTIX()

	assert.Equal(t, nm.GetType(), "malware-analysis")
	_, err := nm.Get()
	assert.Error(t, err)

	nm.SetAnyProduct("new product")
	_, err = nm.Get()
	assert.NoError(t, err)
	assert.Equal(t, nm.GetProduct(), "new product")

	nm.SetAnyVersion("1.23")
	assert.Equal(t, nm.GetVersion(), "1.23")

	rn := "result name"
	nm.SetAnyResultName(rn)
	assert.Equal(t, nm.GetResultName(), rn)

	cv := "configuration version 123"
	nm.SetAnyConfigurationVersion(cv)
	assert.Equal(t, nm.GetConfigurationVersion(), cv)

	aev := "analysis engine version"
	nm.SetAnyAnalysisEngineVersion(aev)
	assert.Equal(t, nm.GetAnalysisEngineVersion(), aev)

	adv := "analysis definition version"
	nm.SetAnyAnalysisDefinitionVersion(adv)
	assert.Equal(t, nm.GetAnalysisDefinitionVersion(), adv)

	ts := "2024-02-11T07:01:01+00:00"
	err = nm.SetAnySubmitted(ts)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetSubmitted(), ts)

	err = nm.SetAnySubmitted(1716367407123)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetSubmitted(), "2024-05-22T11:43:27+03:00")

	tstart := "2024-02-10T11:21:01+00:00"
	err = nm.SetAnyAnalysisStarted(tstart)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetAnalysisStarted(), tstart)

	err = nm.SetAnyAnalysisStarted(1716367407123)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetAnalysisStarted(), "2024-05-22T11:43:27+03:00")

	tstop := "2024-02-10T11:21:01+00:00"
	err = nm.SetAnyAnalysisEnded(tstop)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetAnalysisEnded(), tstop)

	err = nm.SetAnyAnalysisEnded(1716367407123)
	assert.NoError(t, err)
	assert.Equal(t, nm.GetAnalysisEnded(), "2024-05-22T11:43:27+03:00")

	nm.SetAnyModules("modul_one")
	nm.SetAnyModules("modul_two")
	nm.SetAnyModules("modul_three")
	assert.Equal(t, len(nm.GetModules()), 3)

	hvmr := stixhelpers.IdentifierTypeSTIX("host VM ref")
	nm.SetValueHostVMRef(hvmr)
	assert.Equal(t, nm.GetHostVMRef(), hvmr)

	osr := stixhelpers.IdentifierTypeSTIX("operation system ref")
	nm.SetValueOperatingSystemRef(osr)
	assert.Equal(t, nm.GetOperatingSystemRef(), osr)

	r := stixhelpers.OpenVocabTypeSTIX("result example")
	nm.SetValueResult(r)
	assert.Equal(t, nm.GetResult(), r)

	sr := stixhelpers.IdentifierTypeSTIX("sample ref example")
	nm.SetValueSampleRef(sr)
	assert.Equal(t, nm.GetSampleRef(), sr)

	avr := stixhelpers.OpenVocabTypeSTIX("av result example")
	nm.SetValueAvResult(avr)
	assert.Equal(t, nm.GetAvResult(), avr)

	nm.SetValueInstalledSoftwareRefs([]stixhelpers.IdentifierTypeSTIX{"1", "2"})
	assert.Equal(t, len(nm.GetInstalledSoftwareRefs()), 2)

	nm.SetValueAnalysisScoRefs([]stixhelpers.IdentifierTypeSTIX{"a", "b"})
	assert.Equal(t, len(nm.GetAnalysisScoRefs()), 2)
}

/*
// MalwareAnalysisDomainObjectsSTIX объект "Malware Analysis", по терминалогии STIX, содержит анализ вредоносных программ
// захватывающих метаданные и результаты конкретного статического или динамического анализа, выполненного на экземпляре
// вредоносного ПО или семействе вредоносных программ
// Product - название аналитического ПО использованного для обработки и анализа вредоносного ПО (ОБЯЗАТЕЛЬНОЕ ЗНАЧЕНИЕ)
// Version - версия аналитического ПО
// HostVMRef - идентификатор на описание виртуального окружения использованного для анализа вредоносного ПО
// OperatingSystemRef - идентификатор на описание ОС используемой для динамического анализа вредоносного ПО
// InstalledSoftwareRefs - список идентификаторов ссылающихся на описание любого нестандартного ПО установленного в
// ОС используемой для динамического анализа вредоносного ПО
// ConfigurationVersion - именованная конфигурация дополнительных параметров конфигурации продукта, используемого для анализа
// Modules - конкретные модули анализа, которые были использованы и сконфигурированы в продукте во время выполнения анализа
// AnalysisEngineVersion - версия аналитического движка или продукта (включая AV-движки), который был использован для выполнения анализа
// AnalysisDefinitionVersion - версия определений анализа, используемых инструментом анализа (включая AV-инструменты)
// Submitted - время, в формате "2016-05-12T08:17:27.000Z", когда вредоносное ПО было впервые отправлено на сканирование или анализ
// AnalysisStarted - время, в формате "2016-05-12T08:17:27.000Z", начала анализа вредоносного ПО
// AnalysisEnded - время, в формате "2016-05-12T08:17:27.000Z", когда был завершен анализ вредоносного ПО
// ResultName - результат классификации или имя, присвоенное экземпляру вредоносного ПО инструментом анализа (сканером)
// Result - один, из заранее определенного (предложенного) перечня результатов классификации, определяется аналитическим инструментом или сканером
// AnalysisScoRefs - список идентификаторов на другие наблюдаемые Domain Objects STIX которые были захвачены в процессе наблюдения
// SampleRef - содержит ссылку на файл, сетевой трафик или объект на основе которого был выполнен анализ вредоносного ПО
// AvResult - результат аналитической обработки (ЭТО ПОЛЕ ЕСТЬ ТОЛЬКО В ПРИМЕРЕ, в описании типа данного поля нет)
type MalwareAnalysisDomainObjectsSTIX struct {
	commonproperties.CommonPropertiesObjectSTIX
	commonpropertiesstixdo.CommonPropertiesDomainObjectSTIX
	Product                   string                           `json:"product" bson:"product" required:"true"`
	Version                   string                           `json:"version" bson:"version"`
	ResultName                string                           `json:"result_name" bson:"result_name"`
	ConfigurationVersion      string                           `json:"configuration_version" bson:"configuration_version"`
	AnalysisEngineVersion     string                           `json:"analysis_engine_version" bson:"analysis_engine_version"`
	AnalysisDefinitionVersion string                           `json:"analysis_definition_version" bson:"analysis_definition_version"`
	Submitted                 string                           `json:"submitted" bson:"submitted"`
	AnalysisStarted           string                           `json:"analysis_started" bson:"analysis_started"`
	AnalysisEnded             string                           `json:"analysis_ended" bson:"analysis_ended"`
	Modules                   []string                         `json:"modules" bson:"modules"`
	HostVMRef                 stixhelpers.IdentifierTypeSTIX   `json:"host_vm_ref" bson:"host_vm_ref"`
	OperatingSystemRef        stixhelpers.IdentifierTypeSTIX   `json:"operating_system_ref" bson:"operating_system_ref"`
	Result                    stixhelpers.OpenVocabTypeSTIX    `json:"result" bson:"result"`
	SampleRef                 stixhelpers.IdentifierTypeSTIX   `json:"sample_ref" bson:"sample_ref"`
	AvResult                  stixhelpers.OpenVocabTypeSTIX    `json:"av_result" bson:"av_result"`
	InstalledSoftwareRefs     []stixhelpers.IdentifierTypeSTIX `json:"installed_software_refs" bson:"installed_software_refs"`
	AnalysisScoRefs           []stixhelpers.IdentifierTypeSTIX `json:"analysis_sco_refs" bson:"analysis_sco_refs"`
}
*/
